二分查找
public static int quickSort(int[]arr, int n, int target) {
        int l = 0;
        int r = n - 1;
        //区间[l,r]l里查找target
        while (l <= r) {
            int mid = l + (r - l)/2;
            if (arr[mid] == mid) {
                return mid;
            } else if (target > arr[mid]) {
                // target 在【mid + 1, r】
                l = mid + 1;
            } else {
                // target 在【l, mid -1】
                r = mid - 1;
            }
        }
        return -1;
    }
    复制为 r = n 时，while循环变成 l < r;
    那么 当l = r,区间[l,r)则是无效的[42,42)无效，[42,43)有效
       while (l < r) {
                int mid = l + (r - l)/2;
                if (arr[mid] == mid) {
                    return mid;
                } else if (target > arr[mid]) {
                    // target 在【mid + 1, r)
                    l = mid + 1;
                } else {//target < arr[mid]
                    // target 不在【l, mid )中
                    r = mid;
                }
          }
     二分查找变种
     找出第一个值等于给定的元素，注意元素有可能重复所以

      while (l <= r) {
                 int mid = l + (r - l)/2;
                 if (arr[mid] == mid) {
                     return mid;
                 } else if (target > arr[mid]) {
                     // target 在【mid + 1, r】
                     l = mid + 1;
                 } else {
                    if（mid==0||a[mid-1] !=target）
                      return mid;
                    else
                      r = mid - 1;
                 }
             }
             return -1;
       查找最后一个给定的值
             else {
                    if（mid = n-1||a[mid+1] !=target）
                        return mid;
                    else
                         l = mid + 1;
                 }
我们还是重点看第11行代码。如果a[mid]这个元素已经是数组中的最后一个元素了，那它肯定是我们要找的；如果a[mid]的后一个元素a[mid+1]不等于value，那也说明a[mid]就是我们要找的最后一个值等于给定值的元
素。
如果我们经过检查之后，发现a[mid]后面的一个元素a[mid+1]也等于value，那说明当前的这个a[mid]并不是最后一个值等于给定值的元素。我们就更新low=mid+1，因为要找的元素肯定出现在[mid+1, high]之间。
查找第一个大于等于给定值的元素
    public int bsearch(int[] a, int n, int value) {
     int low = 0;
     int high = n - 1;
     while (low <= high) {
         int mid = low + ((high - low) >> 1);
         if (a[mid] >= value) {
             if ((mid == 0) || (a[mid - 1] < value))
                return mid;
             else
                high = mid - 1;
         } else {
              low = mid + 1;
         }
     }
V变体四：查找最后一个小于等于给定值的元素
     while (low <= high) {
         int mid = low + ((high - low) >> 1);
         if (a[mid] > value) {
                high = mid - 1;
         } else {
             if ((mid == n-1) || (a[mid + 1] >value))
                 return mid
               else
               low = mid +1;
         }
     }